{"version":3,"sources":["api/api.js","components/CommentsBlock.jsx","components/PersonCard.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["getPeople","fetch","then","response","json","result","results","catch","error","Error","CommentBlock","comments","length","map","item","className","text","id","PersonCard","name","birth_year","useState","value","setValue","setComments","onClick","e","preventDefault","newComment","Math","floor","random","role","htmlFor","type","placeholder","onChange","target","CommentsBlock","App","people","setPeople","useEffect","allPeople","person","key","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kOASeA,G,MATG,kBAChBC,MAAM,iCACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAM,OAAIA,EAAOC,WACtBC,OAAM,SAACC,GACN,MAAM,IAAIC,MAAMD,Q,cCePE,EAjBM,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACnB,8BACGA,EAASC,OAAS,GACnB,qCACE,2CACA,8BACGD,EAASE,KAAI,SAAAC,GAAI,OAChB,mBAAGC,UAAU,qBAAb,SACGD,EAAKE,MAD+BF,EAAKG,eC2DvCC,EAjEI,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,KAAMC,EAAiB,EAAjBA,WAAiB,EACjBC,mBAAS,IADQ,mBACpCC,EADoC,KAC7BC,EAD6B,OAEXF,mBAAS,IAFE,mBAEpCV,EAFoC,KAE1Ba,EAF0B,KAuB3C,OACE,sBAAKT,UAAU,OAAf,UACE,6BAAKI,IACL,4CAEG,IACAC,KAEH,uBACA,qBAAKL,UAAU,mBAAf,SACE,uBACEU,QA1Ba,SAACC,GACpBA,EAAEC,iBAEF,IAAMC,EAAa,CACjBX,GAAIY,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBf,KAAMM,GAGJA,GACFE,EAAY,GAAD,mBAAKb,GAAL,CAAeiB,KAG5BL,EAAS,KAeHS,KAAK,eAFP,UAIE,uBACEC,QAAQ,gBADV,4BAKA,0BACElB,UAAU,eACVmB,KAAK,OACLf,KAAK,UACLF,GAAG,gBACHkB,YAAY,yBACZb,MAAOA,EACPc,SA7CW,SAACV,GACpBH,EAASG,EAAEW,OAAOf,UA8CZ,wBACEY,KAAK,SACLnB,UAAU,eAFZ,8BAQJ,uBACA,cAACuB,EAAD,CAAe3B,SAAUA,QCvChB4B,MApBf,WAAgB,IAAD,EACelB,mBAAS,IADxB,mBACNmB,EADM,KACEC,EADF,KAUb,OAPAC,qBAAU,WACR1C,IACGE,MAAK,SAACyC,GACLF,EAAUE,QAEb,IAGD,iCACE,6CACCH,EAAO3B,KAAI,SAAC+B,GAAD,OACV,wBAAC,EAAD,2BAAgBA,GAAhB,IAAwBC,IAAKD,EAAOzB,eCP7B2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB9C,MAAK,YAAkD,IAA/C+C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.62c455f0.chunk.js","sourcesContent":["const getPeople = () => (\n  fetch('https://swapi.dev/api/people/')\n    .then(response => response.json())\n    .then(result => result.results)\n    .catch((error) => {\n      throw new Error(error);\n    })\n);\n\nexport default getPeople;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst CommentBlock = ({ comments }) => (\n  <div>\n    {comments.length > 0 && (\n    <>\n      <h4>Comments:</h4>\n      <div>\n        {comments.map(item => (\n          <p className=\"border border-info\" key={item.id}>\n            {item.text}\n          </p>\n        ))}\n      </div>\n    </>\n    )}\n  </div>\n);\n\nexport default CommentBlock;\n\nCommentBlock.propTypes = {\n  comments: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      text: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport CommentsBlock from './CommentsBlock';\n\nconst PersonCard = ({ name, birth_year }) => {\n  const [value, setValue] = useState('');\n  const [comments, setComments] = useState([]);\n\n  const handleChange = (e) => {\n    setValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    const newComment = {\n      id: Math.floor(Math.random() * 1000),\n      text: value,\n    };\n\n    if (value) {\n      setComments([...comments, newComment]);\n    }\n\n    setValue('');\n  };\n\n  return (\n    <div className=\"card\">\n      <h2>{name}</h2>\n      <p>\n        Was born in\n        {' '}\n        {birth_year}\n      </p>\n      <hr />\n      <div className=\"card__input mb-3\">\n        <form\n          onClick={handleSubmit}\n          role=\"presentation\"\n        >\n          <label\n            htmlFor=\"input-comment\"\n          >\n            Enter comment:\n          </label>\n          <textarea\n            className=\"form-control\"\n            type=\"text\"\n            name=\"comment\"\n            id=\"input-comment\"\n            placeholder=\"type your comment here\"\n            value={value}\n            onChange={handleChange}\n          />\n          <button\n            type=\"submit\"\n            className=\"btn btn-info\"\n          >\n            Add comment\n          </button>\n        </form>\n      </div>\n      <hr />\n      <CommentsBlock comments={comments} />\n    </div>\n  );\n};\n\nexport default PersonCard;\n\nPersonCard.propTypes = {\n  name: PropTypes.string.isRequired,\n  birth_year: PropTypes.string.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport getPeople from './api/api';\nimport PersonCard from './components/PersonCard';\n\nfunction App() {\n  const [people, setPeople] = useState([]);\n\n  useEffect(() => {\n    getPeople()\n      .then((allPeople) => {\n        setPeople(allPeople)\n      })\n  }, []);\n\n  return (\n    <main>\n      <h1>Personages:</h1>\n      {people.map((person) => (\n        <PersonCard {...person} key={person.name} />\n      ))}\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}